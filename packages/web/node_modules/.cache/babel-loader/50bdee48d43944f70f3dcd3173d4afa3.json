{"ast":null,"code":"var Class = require('../core/class');\n\nfunction elementFrom(node) {\n  if (node.toElement) return node.toElement();\n  if (node.getDOMNode) return node.getDOMNode();\n  if (node.getNode) return node.getNode();\n  return node;\n}\n\nmodule.exports = Class({\n  // conventions\n  toElement: function () {\n    return this.element;\n  },\n  getDOMNode: function () {\n    return this.toElement();\n  },\n  getNode: function () {\n    return this.toElement();\n  },\n  // placement\n  inject: function (container) {\n    (container.containerElement || elementFrom(container)).appendChild(this.element);\n    return this;\n  },\n  injectBefore: function (sibling) {\n    var element = elementFrom(sibling);\n    element.parentNode.insertBefore(this.element, element);\n    return this;\n  },\n  eject: function () {\n    var element = this.element,\n        parent = element.parentNode;\n    if (parent) parent.removeChild(element); // TODO: VML Nodes are dead after being ejected\n\n    return this;\n  },\n  // events\n  subscribe: function (type, fn, bind) {\n    if (typeof type != 'string') {\n      // listen type / fn with object\n      var subscriptions = [];\n\n      for (var t in type) subscriptions.push(this.subscribe(t, type[t]));\n\n      return function () {\n        // unsubscribe\n        for (var i = 0, l = subscriptions.length; i < l; i++) subscriptions[i]();\n\n        return this;\n      };\n    } else {\n      // listen to one\n      if (!bind) bind = this;\n      var bound;\n\n      if (typeof fn === 'function') {\n        bound = fn.bind ? fn.bind(bind) : function () {\n          return fn.apply(bind, arguments);\n        };\n      } else {\n        bound = fn;\n      }\n\n      var element = this.element;\n\n      if (element.addEventListener) {\n        element.addEventListener(type, bound, false);\n        return function () {\n          // unsubscribe\n          element.removeEventListener(type, bound, false);\n          return this;\n        };\n      } else {\n        element.attachEvent('on' + type, bound);\n        return function () {\n          // unsubscribe\n          element.detachEvent('on' + type, bound);\n          return this;\n        };\n      }\n    }\n  }\n});","map":null,"metadata":{},"sourceType":"script"}