{"ast":null,"code":"import { spy, observable, computed, Reaction } from 'mobx';\nimport { useState, useRef, useMemo, useEffect, useCallback, memo, forwardRef } from 'react';\n\nif (!useState) {\n  throw new Error(\"mobx-react-lite requires React with Hooks support\");\n}\n\nif (!spy) {\n  throw new Error(\"mobx-react-lite requires mobx at least version 4 to be available\");\n}\n\nfunction useObservable(initialValue) {\n  var observableRef = useRef(null);\n\n  if (!observableRef.current) {\n    observableRef.current = observable(initialValue);\n  }\n\n  return observableRef.current;\n}\n\nfunction useComputed(func, inputs) {\n  if (inputs === void 0) {\n    inputs = [];\n  }\n\n  var computed$$1 = useMemo(function () {\n    return computed(func);\n  }, inputs);\n  return computed$$1.get();\n}\n\nvar doNothingDisposer = function doNothingDisposer() {// empty\n};\n/**\r\n * Adds an observable effect (reaction, autorun, or anything else that returns a disposer) that will be registered upon component creation and disposed upon unmounting.\r\n * Returns the generated disposer for early disposal.\r\n *\r\n * @export\r\n * @template D\r\n * @param {() => D} disposerGenerator A function that returns the disposer of the wanted effect.\r\n * @param {ReadonlyArray<any>} [inputs=[]] If you want the effect to be automatically re-created when some variable(s) are changed then pass them in this array.\r\n * @returns {D}\r\n */\n\n\nfunction useDisposable(disposerGenerator, inputs) {\n  if (inputs === void 0) {\n    inputs = [];\n  }\n\n  var disposerRef = useRef(null);\n  var earlyDisposedRef = useRef(false);\n  useEffect(function () {\n    return lazyCreateDisposer(false);\n  }, inputs);\n\n  function lazyCreateDisposer(earlyDisposal) {\n    // ensure that we won't create a new disposer if it was early disposed\n    if (earlyDisposedRef.current) {\n      return doNothingDisposer;\n    }\n\n    if (!disposerRef.current) {\n      var newDisposer = disposerGenerator();\n\n      if (typeof newDisposer !== \"function\") {\n        var error = new Error(\"generated disposer must be a function\");\n        {\n          // tslint:disable-next-line:no-console\n          console.error(error);\n          return doNothingDisposer;\n        }\n      }\n\n      disposerRef.current = newDisposer;\n    }\n\n    return function () {\n      if (disposerRef.current) {\n        disposerRef.current();\n        disposerRef.current = null;\n      }\n\n      if (earlyDisposal) {\n        earlyDisposedRef.current = true;\n      }\n    };\n  }\n\n  return lazyCreateDisposer(true);\n}\n\nvar globalIsUsingStaticRendering = false;\n\nfunction useStaticRendering(enable) {\n  globalIsUsingStaticRendering = enable;\n}\n\nfunction isUsingStaticRendering() {\n  return globalIsUsingStaticRendering;\n}\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\n\n\nvar _assign = function __assign() {\n  _assign = Object.assign || function __assign(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return _assign.apply(this, arguments);\n};\n\nfunction __read(o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {\n      ar.push(r.value);\n    }\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n}\n\nvar EMPTY_ARRAY = [];\n\nfunction useUnmount(fn) {\n  useEffect(function () {\n    return fn;\n  }, EMPTY_ARRAY);\n}\n\nfunction useForceUpdate() {\n  var _a = __read(useState(0), 2),\n      setTick = _a[1];\n\n  var update = useCallback(function () {\n    setTick(function (tick) {\n      return tick + 1;\n    });\n  }, []);\n  return update;\n}\n\nfunction useObserver(fn, baseComponentName) {\n  if (baseComponentName === void 0) {\n    baseComponentName = \"observed\";\n  }\n\n  if (isUsingStaticRendering()) {\n    return fn();\n  }\n\n  var forceUpdate = useForceUpdate();\n  var reaction = useRef(null);\n\n  if (!reaction.current) {\n    reaction.current = new Reaction(\"observer(\" + baseComponentName + \")\", function () {\n      forceUpdate();\n    });\n  }\n\n  useUnmount(function () {\n    reaction.current.dispose();\n  }); // render the original component, but have the\n  // reaction track the observables, so that rendering\n  // can be invalidated (see above) once a dependency changes\n\n  var rendering;\n  reaction.current.track(function () {\n    rendering = fn();\n  });\n  return rendering;\n} // n.b. base case is not used for actual typings or exported in the typing files\n\n\nfunction observer(baseComponent, options) {\n  // The working of observer is explaind step by step in this talk: https://www.youtube.com/watch?v=cPF4iBedoF0&feature=youtu.be&t=1307\n  if (isUsingStaticRendering()) {\n    return baseComponent;\n  }\n\n  var realOptions = _assign({\n    forwardRef: false\n  }, options);\n\n  var baseComponentName = baseComponent.displayName || baseComponent.name;\n\n  var wrappedComponent = function wrappedComponent(props, ref) {\n    return useObserver(function () {\n      return baseComponent(props, ref);\n    }, baseComponentName);\n  }; // memo; we are not intested in deep updates\n  // in props; we assume that if deep objects are changed,\n  // this is in observables, which would have been tracked anyway\n\n\n  var memoComponent;\n\n  if (realOptions.forwardRef) {\n    // we have to use forwardRef here because:\n    // 1. it cannot go before memo, only after it\n    // 2. forwardRef converts the function into an actual component, so we can't let the baseComponent do it\n    //    since it wouldn't be a callable function anymore\n    memoComponent = memo(forwardRef(wrappedComponent));\n  } else {\n    memoComponent = memo(wrappedComponent);\n  }\n\n  memoComponent.displayName = baseComponentName;\n  return memoComponent;\n}\n\nfunction ObserverComponent(_a) {\n  var children = _a.children,\n      render = _a.render;\n  var component = children || render;\n\n  if (typeof component !== \"function\") {\n    return null;\n  }\n\n  return useObserver(component);\n}\n\nObserverComponent.propTypes = {\n  children: ObserverPropsCheck,\n  render: ObserverPropsCheck\n};\nObserverComponent.displayName = \"Observer\";\n\nfunction ObserverPropsCheck(props, key, componentName, location, propFullName) {\n  var extraKey = key === \"children\" ? \"render\" : \"children\";\n  var hasProp = typeof props[key] === \"function\";\n  var hasExtraProp = typeof props[extraKey] === \"function\";\n\n  if (hasProp && hasExtraProp) {\n    return new Error(\"MobX Observer: Do not use children and render in the same time in`\" + componentName);\n  }\n\n  if (hasProp || hasExtraProp) {\n    return null;\n  }\n\n  return new Error(\"Invalid prop `\" + propFullName + \"` of type `\" + typeof props[key] + \"` supplied to\" + \" `\" + componentName + \"`, expected `function`.\");\n}\n\nexport { useObservable, useComputed, useDisposable, isUsingStaticRendering, useStaticRendering, observer, useObserver, ObserverComponent as Observer };","map":null,"metadata":{},"sourceType":"module"}