{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar mobx_1 = require(\"mobx\");\n\nvar serializr_1 = require(\"serializr\");\n\nvar Storage = require(\"./storage\");\n\nvar merge_x_1 = require(\"./merge-x\");\n\nvar types_1 = require(\"./types\");\n\nvar persist_object_1 = require(\"./persist-object\");\n\nfunction persist() {\n  var args = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    args[_i] = arguments[_i];\n  }\n\n  var a = args[0],\n      b = args[1],\n      c = args[2];\n\n  if (a in types_1.types) {\n    return serializr_1.serializable(types_1.types[a](b));\n  } else if (args.length === 1) {\n    return function (target) {\n      return persist_object_1.persistObject(target, a);\n    };\n  } else {\n    return serializr_1.serializable.apply(null, args);\n  }\n}\n\nexports.persist = persist;\n\nfunction create(_a) {\n  var _b = _a === void 0 ? {} : _a,\n      _c = _b.storage,\n      storage = _c === void 0 ? Storage : _c,\n      _d = _b.jsonify,\n      jsonify = _d === void 0 ? true : _d,\n      _e = _b.debounce,\n      debounce = _e === void 0 ? 0 : _e;\n\n  if (typeof localStorage !== 'undefined' && localStorage === storage) storage = Storage;\n  return function hydrate(key, store, initialState) {\n    if (initialState === void 0) {\n      initialState = {};\n    }\n\n    var schema = serializr_1.getDefaultModelSchema(store);\n\n    function hydration() {\n      var promise = storage.getItem(key).then(function (d) {\n        return !jsonify ? d : JSON.parse(d);\n      }).then(mobx_1.action(\"[mobx-persist \" + key + \"] LOAD_DATA\", function (persisted) {\n        if (persisted && typeof persisted === 'object') {\n          serializr_1.update(schema, store, persisted);\n        }\n\n        merge_x_1.mergeObservables(store, initialState);\n        return store;\n      }));\n      promise.rehydrate = hydration;\n      return promise;\n    }\n\n    var result = hydration();\n    mobx_1.reaction(function () {\n      return serializr_1.serialize(schema, store);\n    }, function (data) {\n      return storage.setItem(key, !jsonify ? data : JSON.stringify(data));\n    }, {\n      delay: debounce\n    });\n    return result;\n  };\n}\n\nexports.create = create;","map":null,"metadata":{},"sourceType":"script"}