{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  }\n  result[\"default\"] = mod;\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar dayjs_1 = __importDefault(require(\"dayjs\"));\n\nvar mobx_react_lite_1 = require(\"mobx-react-lite\");\n\nvar React = __importStar(require(\"react\"));\n\nvar react_native_1 = require(\"react-native\");\n\nvar RootStore_1 = require(\"../stores/RootStore\");\n\nvar WorkoutCard_1 = require(\"../ui/WorkoutCard\");\n\nvar WorkoutTimer_1 = require(\"../ui/WorkoutTimer\");\n\nvar styles = react_native_1.StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#fafafa\"\n  },\n  scrollContainer: {\n    padding: 10,\n    marginBottom: 50\n  }\n});\nexports.CurrentWorkout = mobx_react_lite_1.observer(function (_a) {\n  var history = _a.history,\n      _b = _a.match.params,\n      day = _b.day,\n      month = _b.month,\n      year = _b.year;\n  var rootStore = React.useContext(RootStore_1.RootStoreContext);\n  React.useEffect(function () {\n    // stops timer when unmounted\n    return function () {\n      rootStore.workoutTimerStore.stopTimer();\n    }; // brackets calls useEffect at the beginning\n  }, []);\n  var isCurrentWorkout = !year && !month && !day;\n  var dateKey = year + \"-\" + month + \"-\" + day;\n  return React.createElement(react_native_1.View, {\n    style: styles.container\n  }, React.createElement(react_native_1.ScrollView // allows tap to work correctly\n  , {\n    // allows tap to work correctly\n    keyboardShouldPersistTaps: \"always\",\n    contentContainerStyle: styles.scrollContainer\n  }, (isCurrentWorkout ? rootStore.workoutStore.currentExercises : rootStore.workoutStore.history[dateKey]).map(function (e) {\n    return React.createElement(WorkoutCard_1.WorkoutCard, {\n      onSetPress: function onSetPress(setIndex) {\n        rootStore.workoutTimerStore.startTimer();\n        var v = e.sets[setIndex];\n        var newValue;\n\n        if (v === \"\") {\n          newValue = \"\" + e.reps;\n        } else if (v === \"0\") {\n          rootStore.workoutTimerStore.stopTimer();\n          newValue = \"\";\n        } else {\n          newValue = \"\" + (parseInt(v) - 1);\n        }\n\n        e.sets[setIndex] = newValue;\n      },\n      key: e.exercise,\n      sets: e.sets,\n      exercise: e.exercise,\n      repsAndWeight: e.numSets + \"x\" + e.reps + \" \" + e.weight\n    });\n  }), React.createElement(react_native_1.Button, {\n    title: \"SAVE\",\n    onPress: function onPress() {\n      if (isCurrentWorkout) {\n        rootStore.workoutStore.history[dayjs_1.default().format(\"YYYY-MM-DD\")] = rootStore.workoutStore.currentExercises;\n        rootStore.workoutStore.currentExercises = [];\n      }\n\n      history.push(\"/\");\n    }\n  })), rootStore.workoutTimerStore.isRunning ? React.createElement(WorkoutTimer_1.WorkoutTimer, {\n    percent: rootStore.workoutTimerStore.percent,\n    currentTime: rootStore.workoutTimerStore.display,\n    onXPress: function onXPress() {\n      return rootStore.workoutTimerStore.stopTimer();\n    }\n  }) : null);\n});","map":null,"metadata":{},"sourceType":"script"}