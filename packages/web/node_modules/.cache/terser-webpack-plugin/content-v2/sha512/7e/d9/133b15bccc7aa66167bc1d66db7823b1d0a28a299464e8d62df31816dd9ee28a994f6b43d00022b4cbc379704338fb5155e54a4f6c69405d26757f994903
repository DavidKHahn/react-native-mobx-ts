{"map":"{\"version\":3,\"sources\":[\"/Users/dhjkmedia/Desktop/Github-RepoFiles/react-native-mobx-ts/packages/web/src/App.tsx\",\"/Users/dhjkmedia/Desktop/Github-RepoFiles/react-native-mobx-ts/packages/web/src/serviceWorker.ts\",\"/Users/dhjkmedia/Desktop/Github-RepoFiles/react-native-mobx-ts/packages/web/src/index.tsx\",\"/Users/dhjkmedia/Desktop/Github-RepoFiles/react-native-mobx-ts/node_modules/react-scripts/node_modules/babel-loader/lib/index.js??ref--6-oneOf-2!/Users/dhjkmedia/Desktop/Github-RepoFiles/react-native-mobx-ts/packages/common/dist/index.js\"],\"names\":[\"App\",\"Boolean\",\"window\",\"location\",\"hostname\",\"match\",\"AppRegistry\",\"registerComponent\",\"runApplication\",\"initialProps\",\"rootTag\",\"document\",\"getElementById\",\"navigator\",\"serviceWorker\",\"ready\",\"then\",\"registration\",\"unregister\",\"__importStar\",\"this\",\"mod\",\"__esModule\",\"result\",\"k\",\"Object\",\"hasOwnProperty\",\"call\",\"defineProperty\",\"exports\",\"value\",\"react_1\",\"__webpack_require__\",\"react_native_1\",\"_a\",\"useState\",\"count\",\"setCount\",\"default\",\"createElement\",\"View\",\"style\",\"styles\",\"container\",\"Text\",\"welcome\",\"instructions\",\"Button\",\"title\",\"onPress\",\"StyleSheet\",\"create\",\"flex\",\"justifyContent\",\"alignItems\",\"backgroundColor\",\"fontSize\",\"textAlign\",\"margin\",\"color\",\"marginBottom\"],\"mappings\":\"mJAEeA,QAAf,ICUoBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,EAAAA,EAAYC,kBAAkB,MAAO,WAAA,OAAMP,IAE3CM,EAAAA,EAAYE,eAAe,MAAO,CAChCC,aAAc,GACdC,QAASC,SAASC,eAAe,UD+H7B,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,gDEzInB,IAAAC,EAAAC,MAAAA,KAAAD,cAAA,SAAAE,GACA,GAAAA,GAAAA,EAAAC,WAAA,OAAAD,EACA,IAAAE,EAAA,GACA,GAAA,MAAAF,EAAA,IAAA,IAAAG,KAAAH,EACAI,OAAAC,eAAAC,KAAAN,EAAAG,KAAAD,EAAAC,GAAAH,EAAAG,IAGA,OADAD,EAAA,QAAAF,EACAE,GAGAE,OAAAG,eAAAC,EAAA,aAAA,CACAC,OAAA,IAGA,IAAAC,EAAAZ,EAA2Ba,EAAQ,MAEnCC,EAAqBD,EAAQ,IAE7BH,EAAA7B,IAAA,WACA,IAAAkC,EAAAH,EAAAI,SAAA,GACAC,EAAAF,EAAA,GACAG,EAAAH,EAAA,GAEA,OAAAH,EAAAO,QAAAC,cAAAN,EAAAO,KAAA,CACAC,MAAAC,EAAAC,WACGZ,EAAAO,QAAAC,cAAAN,EAAAW,KAAA,CACHH,MAAAC,EAAAG,SACG,4BAAAd,EAAAO,QAAAC,cAAAN,EAAAW,KAAA,CACHH,MAAAC,EAAAI,cACG,gCAAAf,EAAAO,QAAAC,cAAAN,EAAAW,KAAA,CACHH,MAAAC,EAAAI,cACGV,GAAAL,EAAAO,QAAAC,cAAAN,EAAAc,OAAA,CACHC,MAAA,YACAC,QAAA,WACA,OAAAZ,EAAAD,EAAA,QAKAP,EAAAS,QAAAT,EAAA7B,IACA,IAAA0C,EAAAT,EAAAiB,WAAAC,OAAA,CACAR,UAAA,CACAS,KAAA,EACAC,eAAA,SACAC,WAAA,SACAC,gBAAA,WAEAV,QAAA,CACAW,SAAA,GACAC,UAAA,SACAC,OAAA,IAEAZ,aAAA,CACAW,UAAA,SACAE,MAAA,UACAC,aAAA\",\"sourcesContent\":[\"import { App } from \\\"@app/common\\\";\\n\\nexport default App;\\n\",\"// This optional code is used to register a service worker.\\n// register() is not called by default.\\n\\n// This lets the app load faster on subsequent visits in production, and gives\\n// it offline capabilities. However, it also means that developers (and users)\\n// will only see deployed updates on subsequent visits to a page, after all the\\n// existing tabs open on the page have been closed, since previously cached\\n// resources are updated in the background.\\n\\n// To learn more about the benefits of this model and instructions on how to\\n// opt-in, read https://bit.ly/CRA-PWA\\n\\nconst isLocalhost = Boolean(\\n  window.location.hostname === 'localhost' ||\\n    // [::1] is the IPv6 localhost address.\\n    window.location.hostname === '[::1]' ||\\n    // 127.0.0.1/8 is considered localhost for IPv4.\\n    window.location.hostname.match(\\n      /^127(?:\\\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\\n    )\\n);\\n\\ntype Config = {\\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\\n};\\n\\nexport function register(config?: Config) {\\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\\n    // The URL constructor is available in all browsers that support SW.\\n    const publicUrl = new URL(\\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\\n      window.location.href\\n    );\\n    if (publicUrl.origin !== window.location.origin) {\\n      // Our service worker won't work if PUBLIC_URL is on a different origin\\n      // from what our page is served on. This might happen if a CDN is used to\\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\\n      return;\\n    }\\n\\n    window.addEventListener('load', () => {\\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\\n\\n      if (isLocalhost) {\\n        // This is running on localhost. Let's check if a service worker still exists or not.\\n        checkValidServiceWorker(swUrl, config);\\n\\n        // Add some additional logging to localhost, pointing developers to the\\n        // service worker/PWA documentation.\\n        navigator.serviceWorker.ready.then(() => {\\n          console.log(\\n            'This web app is being served cache-first by a service ' +\\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\\n          );\\n        });\\n      } else {\\n        // Is not localhost. Just register service worker\\n        registerValidSW(swUrl, config);\\n      }\\n    });\\n  }\\n}\\n\\nfunction registerValidSW(swUrl: string, config?: Config) {\\n  navigator.serviceWorker\\n    .register(swUrl)\\n    .then(registration => {\\n      registration.onupdatefound = () => {\\n        const installingWorker = registration.installing;\\n        if (installingWorker == null) {\\n          return;\\n        }\\n        installingWorker.onstatechange = () => {\\n          if (installingWorker.state === 'installed') {\\n            if (navigator.serviceWorker.controller) {\\n              // At this point, the updated precached content has been fetched,\\n              // but the previous service worker will still serve the older\\n              // content until all client tabs are closed.\\n              console.log(\\n                'New content is available and will be used when all ' +\\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\\n              );\\n\\n              // Execute callback\\n              if (config && config.onUpdate) {\\n                config.onUpdate(registration);\\n              }\\n            } else {\\n              // At this point, everything has been precached.\\n              // It's the perfect time to display a\\n              // \\\"Content is cached for offline use.\\\" message.\\n              console.log('Content is cached for offline use.');\\n\\n              // Execute callback\\n              if (config && config.onSuccess) {\\n                config.onSuccess(registration);\\n              }\\n            }\\n          }\\n        };\\n      };\\n    })\\n    .catch(error => {\\n      console.error('Error during service worker registration:', error);\\n    });\\n}\\n\\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\\n  // Check if the service worker can be found. If it can't reload the page.\\n  fetch(swUrl)\\n    .then(response => {\\n      // Ensure service worker exists, and that we really are getting a JS file.\\n      const contentType = response.headers.get('content-type');\\n      if (\\n        response.status === 404 ||\\n        (contentType != null && contentType.indexOf('javascript') === -1)\\n      ) {\\n        // No service worker found. Probably a different app. Reload the page.\\n        navigator.serviceWorker.ready.then(registration => {\\n          registration.unregister().then(() => {\\n            window.location.reload();\\n          });\\n        });\\n      } else {\\n        // Service worker found. Proceed as normal.\\n        registerValidSW(swUrl, config);\\n      }\\n    })\\n    .catch(() => {\\n      console.log(\\n        'No internet connection found. App is running in offline mode.'\\n      );\\n    });\\n}\\n\\nexport function unregister() {\\n  if ('serviceWorker' in navigator) {\\n    navigator.serviceWorker.ready.then(registration => {\\n      registration.unregister();\\n    });\\n  }\\n}\\n\",\"// import React from \\\"react\\\";\\n// import ReactDOM from \\\"react-dom\\\";\\nimport { AppRegistry } from \\\"react-native\\\";\\nimport App from \\\"./App\\\";\\nimport * as serviceWorker from \\\"./serviceWorker\\\";\\n\\nAppRegistry.registerComponent(\\\"App\\\", () => App);\\n\\nAppRegistry.runApplication(\\\"App\\\", {\\n  initialProps: {},\\n  rootTag: document.getElementById(\\\"root\\\")\\n});\\n\\n// If you want your app to work offline and load faster, you can change\\n// unregister() to register() below. Note this comes with some pitfalls.\\n// Learn more about service workers: https://bit.ly/CRA-PWA\\nserviceWorker.unregister();\\n\",\"\\\"use strict\\\";\\n\\nvar __importStar = this && this.__importStar || function (mod) {\\n  if (mod && mod.__esModule) return mod;\\n  var result = {};\\n  if (mod != null) for (var k in mod) {\\n    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\\n  }\\n  result[\\\"default\\\"] = mod;\\n  return result;\\n};\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\n\\nvar react_1 = __importStar(require(\\\"react\\\"));\\n\\nvar react_native_1 = require(\\\"react-native\\\");\\n\\nexports.App = function () {\\n  var _a = react_1.useState(0),\\n      count = _a[0],\\n      setCount = _a[1];\\n\\n  return react_1.default.createElement(react_native_1.View, {\\n    style: styles.container\\n  }, react_1.default.createElement(react_native_1.Text, {\\n    style: styles.welcome\\n  }, \\\"Welcome to React Native!\\\"), react_1.default.createElement(react_native_1.Text, {\\n    style: styles.instructions\\n  }, \\\"To get started, edit App.tsx\\\"), react_1.default.createElement(react_native_1.Text, {\\n    style: styles.instructions\\n  }, count), react_1.default.createElement(react_native_1.Button, {\\n    title: \\\"increment\\\",\\n    onPress: function onPress() {\\n      return setCount(count + 1);\\n    }\\n  }));\\n};\\n\\nexports.default = exports.App;\\nvar styles = react_native_1.StyleSheet.create({\\n  container: {\\n    flex: 1,\\n    justifyContent: 'center',\\n    alignItems: 'center',\\n    backgroundColor: '#F5FCFF'\\n  },\\n  welcome: {\\n    fontSize: 20,\\n    textAlign: 'center',\\n    margin: 10\\n  },\\n  instructions: {\\n    textAlign: 'center',\\n    color: '#333333',\\n    marginBottom: 5\\n  }\\n});\"]}","code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{100:function(e,t,n){e.exports=n(131)},131:function(e,t,n){\"use strict\";n.r(t);var o=n(66),r=n(82).App;Boolean(\"localhost\"===window.location.hostname||\"[::1]\"===window.location.hostname||window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));o.a.registerComponent(\"App\",function(){return r}),o.a.runApplication(\"App\",{initialProps:{},rootTag:document.getElementById(\"root\")}),\"serviceWorker\"in navigator&&navigator.serviceWorker.ready.then(function(e){e.unregister()})},82:function(e,t,n){\"use strict\";var o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t};Object.defineProperty(t,\"__esModule\",{value:!0});var r=o(n(101)),i=n(81);t.App=function(){var e=r.useState(0),t=e[0],n=e[1];return r.default.createElement(i.View,{style:a.container},r.default.createElement(i.Text,{style:a.welcome},\"Welcome to React Native!\"),r.default.createElement(i.Text,{style:a.instructions},\"To get started, edit App.tsx\"),r.default.createElement(i.Text,{style:a.instructions},t),r.default.createElement(i.Button,{title:\"increment\",onPress:function(){return n(t+1)}}))},t.default=t.App;var a=i.StyleSheet.create({container:{flex:1,justifyContent:\"center\",alignItems:\"center\",backgroundColor:\"#F5FCFF\"},welcome:{fontSize:20,textAlign:\"center\",margin:10},instructions:{textAlign:\"center\",color:\"#333333\",marginBottom:5}})}},[[100,1,2]]]);","extractedComments":[]}